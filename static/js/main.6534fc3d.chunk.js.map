{"version":3,"sources":["components/estimator.js","components/Result.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["commonFunction","currentlyInfected","data","periodType","timeToElapse","totalHospitalBeds","timeInDays","convertToDays","infectionsByRequestedTime","Math","trunc","severeCasesByRequestedTime","hospitalBedAvailable","hospitalBedsByRequestedTime","casesForICUByRequestedTime","casesForVentilatorsByRequestedTime","impactCases","reportedCases","severeImpactCases","covid19ImpactEstimator","impact","severeImpact","Result","className","Component","Form","props","validateInput","fieldName","value","formErrors","state","popEntryInvalid","periodTypeInvalid","timeToElapseInValid","reportedCasesInvalid","totalHospitalBedsInvalid","Number","length","population","setState","validateForm","formValid","handleChange","e","name","target","handleSubmit","preventDefault","result","submitError","console","log","this","data-population","type","onChange","placeholder","data-period-type","data-time-to-elapse","data-reported-cases","data-total-hospital-beds","data-go-estimate","onClick","FormErrors","Object","keys","map","i","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6534fc3d.chunk.js","sourcesContent":["\r\nexport const convertToDays = (periodType, timeToElapse) => {\r\n    let timeInDays;\r\n    switch (periodType) {\r\n      case 'months':\r\n        timeInDays = timeToElapse * 30;\r\n        break;\r\n      case 'weeks':\r\n        timeInDays = timeToElapse * 7;\r\n        break;\r\n      default:\r\n        timeInDays = timeToElapse;\r\n    }\r\n    return timeInDays;\r\n  };\r\n  \r\n  const commonFunction = (currentlyInfected, data) => {\r\n    const {\r\n      periodType,\r\n      timeToElapse,\r\n      totalHospitalBeds,\r\n      //region\r\n    } = data;\r\n    /*\r\n    const {\r\n      avgDailyIncomeInUSD,\r\n      avgDailyIncomePopulation\r\n    } = region;\r\n    */\r\n    const timeInDays = convertToDays(periodType, timeToElapse);\r\n    const infectionsByRequestedTime = currentlyInfected * (2 ** Math.trunc(timeInDays / 3));\r\n    const severeCasesByRequestedTime = infectionsByRequestedTime * 0.15;\r\n    const hospitalBedAvailable = totalHospitalBeds * 0.35;\r\n    const hospitalBedsByRequestedTime = Math.trunc(hospitalBedAvailable - severeCasesByRequestedTime);\r\n    const casesForICUByRequestedTime = Math.trunc(infectionsByRequestedTime * 0.05);\r\n    const casesForVentilatorsByRequestedTime = Math.trunc(infectionsByRequestedTime * 0.02);\r\n    /*const avgDollarXIncomePopXtime = avgDailyIncomePopulation * avgDailyIncomeInUSD;\r\n    const dollarOut = (infectionsByRequestedTime * avgDollarXIncomePopXtime) / timeInDays;\r\n    const dollarsInFlight = Math.floor(dollarOut);*/\r\n  \r\n    return {\r\n      currentlyInfected,\r\n      infectionsByRequestedTime,\r\n      severeCasesByRequestedTime,\r\n      hospitalBedsByRequestedTime,\r\n      casesForICUByRequestedTime,\r\n      casesForVentilatorsByRequestedTime,\r\n      //dollarsInFlight\r\n    };\r\n  };\r\n  \r\n  export const impactCases = (data) => {\r\n    const { reportedCases } = data;\r\n    const currentlyInfected = reportedCases * 10;\r\n    return commonFunction(currentlyInfected, data);\r\n  };\r\n  \r\n  export const severeImpactCases = (data) => {\r\n    const { reportedCases } = data;\r\n    const currentlyInfected = reportedCases * 50;\r\n    return commonFunction(currentlyInfected, data);\r\n  };\r\n  \r\n  export const covid19ImpactEstimator = (data) => (\r\n    {\r\n      data,\r\n      impact: impactCases(data),\r\n      severeImpact: severeImpactCases(data)\r\n    }\r\n  );\r\n  \r\n  export default covid19ImpactEstimator;\r\n  ","import React, {Component} from 'react';\r\n\r\n\r\n\r\nclass Result extends Component {\r\n  render() {\r\n    return(\r\n      <div>\r\n        <section className='result-display'>\r\n              \r\n        </section>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Result;","import React, {Component} from 'react';\r\nimport {covid19ImpactEstimator} from './estimator.js'\r\nimport Result from './Result';\r\n\r\nclass Form extends Component {\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      population: '',\r\n      periodType: '',\r\n      timeToElapse: '',\r\n      reportedCases: '',\r\n      totalHospitalBeds: '',\r\n      formErrors: {\r\n        population: '',\r\n        periodType: '',\r\n        timeToElapse: '',\r\n        reportedCases: '',\r\n        totalHospitalBeds: ''\r\n      },\r\n      popEntryInvalid: true,\r\n      periodTypeInvalid: true,\r\n      timeToElapseInValid: true,\r\n      reportedCasesInvalid: true,\r\n      totalHospitalBedsInvalid: true,\r\n      formValid: false,\r\n      submitError: '',\r\n      result: ''\r\n    }\r\n  }\r\n  validateInput = (fieldName, value) => {\r\n    let formErrors = this.state.formErrors;\r\n    let popEntryInvalid = this.state.popEntryInvalid;\r\n    let periodTypeInvalid = this.state.periodTypeInvalid;\r\n    let timeToElapseInValid = this.state.timeToElapseInValid;\r\n    let reportedCasesInvalid = this.state.reportedCasesInvalid;\r\n    let totalHospitalBedsInvalid = this.state.reportedCasesInvalid;\r\n\r\n    switch (fieldName) {\r\n      case 'population':\r\n        popEntryInvalid = Number(value) < 10 || value.length < 1;\r\n        formErrors.population = popEntryInvalid ? 'Population cannot be blank or less than 10' : '';\r\n        break;\r\n      case 'periodType':\r\n        periodTypeInvalid = value == null;\r\n        formErrors.periodType = periodTypeInvalid ? 'Select a period Type' : '';\r\n        break;\r\n      case 'timeToElapse':\r\n        timeToElapseInValid = Number(value) < 1 || value.length < 1;\r\n        formErrors.timeToElapse = timeToElapseInValid ? 'input a figure above 1' : '';\r\n        break;\r\n      case 'reportedCases':\r\n        reportedCasesInvalid = Number(value) < 1 || value.length < 1;\r\n        formErrors.reportedCases = reportedCasesInvalid ? 'Reported Cases Cannot be blank or less than 1' : '';\r\n        break;\r\n      case 'totalHospitalBeds':\r\n        totalHospitalBedsInvalid = Number(value) < 1 || value.length < 1;\r\n        formErrors.totalHospitalBeds = totalHospitalBedsInvalid ? 'Total hospital beds cannot blank or less than 1' : '';\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    this.setState({\r\n      periodTypeInvalid,\r\n      popEntryInvalid,\r\n      timeToElapseInValid,\r\n      reportedCasesInvalid,\r\n      totalHospitalBedsInvalid\r\n    }, this.validateForm);\r\n  }\r\n\r\n  validateForm = () => {\r\n    this.setState({\r\n      formValid: !this.state.periodTypeInvalid && \r\n                !this.state.popEntryInvalid &&\r\n                !this.state.timeToElapseInValid &&\r\n                !this.state.reportedCasesInvalid &&\r\n                !this.state.totalHospitalBedsInvalid\r\n    })\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    this.setState({\r\n      [name] : value\r\n    }, () => {\r\n      this.validateInput(name, value)\r\n    })\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //console.log(this.state.formErrors);\r\n    if(!this.state.formValid) {\r\n      this.setState({\r\n        submitError: 'You need to enter all empty space to submit the form'\r\n      })\r\n      console.log(this.state.submitError);\r\n    }else{\r\n      this.setState({\r\n        result: covid19ImpactEstimator(this.state),\r\n        submitError: ''\r\n      })\r\n      console.log(this.state.result);\r\n    }\r\n    \r\n\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className='container'>\r\n        <header className='header'>COVID-19 Impact Estimator</header>\r\n        <div className='flex-container'>\r\n          <form className='flex-box'>\r\n            <p className='submit-error'>{this.state.submitError}</p>\r\n            <div className='error-text'>\r\n              <FormErrors formErrors={this.state.formErrors} />                    \r\n            </div>\r\n            <div className='input-half'>\r\n              <label>Population</label>\r\n              <input data-population type='number' name='population' onChange={this.handleChange} placeholder='Enter Population'/>\r\n              <label>Period Type</label>              \r\n              <select data-period-type name='periodType' value={this.state.periodType} onChange={this.handleChange} placeholder='Select Period Type'>\r\n                <option value=''>Select Period Type</option>\r\n                <option value='days'>Days</option>\r\n                <option value='weeks'>Weeks</option>\r\n                <option value='months'>Months</option>\r\n              </select>\r\n              <label>Time to elaspe</label>\r\n              <input data-time-to-elapse type='number' name='timeToElapse' onChange={this.handleChange} placeholder='Time to Elapse'/>\r\n              <label>Reported Cases</label>              \r\n              <input data-reported-cases type='number' name='reportedCases' onChange={this.handleChange} placeholder='Enter Reported Cases'/>\r\n              <label>Total Hospital Beds</label>              \r\n              <input data-total-hospital-beds type='number' name='totalHospitalBeds' onChange={this.handleChange} placeholder='Enter Total Hospital Beds'/>\r\n            </div>\r\n            <div className='button-div'>\r\n              <button data-go-estimate type='submit' onClick={this.handleSubmit}>Estimate</button>\r\n            </div>\r\n          </form>\r\n\r\n          <section className='flex-box'>\r\n            <Result />\r\n          </section>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst FormErrors = ({formErrors}) => {\r\n  return(\r\n    <div className='formErrors'>\r\n      <ul>\r\n        {\r\n          Object.keys(formErrors).map((fieldName, i) => {\r\n            if(formErrors[fieldName].length > 0){\r\n              return (\r\n                <li key={i}>{formErrors[fieldName]}</li>\r\n              )\r\n            }\r\n          })\r\n        }\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Form from './components/Form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}