{"version":3,"sources":["components/estimator.js","components/Result.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["commonFunction","currentlyInfected","data","periodType","timeToElapse","totalHospitalBeds","timeInDays","convertToDays","infectionsByRequestedTime","Math","trunc","severeCasesByRequestedTime","hospitalBedAvailable","hospitalBedsByRequestedTime","casesForICUByRequestedTime","casesForVentilatorsByRequestedTime","impactCases","reportedCases","severeImpactCases","covid19ImpactEstimator","impact","severeImpact","Result","props","switchBtwImPactAndSevere","chartData","labels","result","datasets","label","backgroundColor","handleClick","setState","toggleImpact","state","setTimeout","undefined","this","console","log","className","onClick","option","maintainAspectRatio","Component","Form","validateInput","fieldName","value","formErrors","popEntryInvalid","periodTypeInvalid","timeToElapseInValid","reportedCasesInvalid","totalHospitalBedsInvalid","Number","length","population","validateForm","formValid","handleChange","e","name","target","handleSubmit","preventDefault","submitError","canSubmit","data-population","type","onChange","placeholder","data-period-type","data-time-to-elapse","data-reported-cases","data-total-hospital-beds","class","data-go-estimate","FormErrors","Object","keys","map","i","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8787e8f2.chunk.js","sourcesContent":["\r\nexport const convertToDays = (periodType, timeToElapse) => {\r\n    let timeInDays;\r\n    switch (periodType) {\r\n      case 'months':\r\n        timeInDays = timeToElapse * 30;\r\n        break;\r\n      case 'weeks':\r\n        timeInDays = timeToElapse * 7;\r\n        break;\r\n      default:\r\n        timeInDays = timeToElapse;\r\n    }\r\n    return timeInDays;\r\n  };\r\n  \r\n  const commonFunction = (currentlyInfected, data) => {\r\n    const {\r\n      periodType,\r\n      timeToElapse,\r\n      totalHospitalBeds,\r\n      //region\r\n    } = data;\r\n    /*\r\n    const {\r\n      avgDailyIncomeInUSD,\r\n      avgDailyIncomePopulation\r\n    } = region;\r\n    */\r\n    const timeInDays = convertToDays(periodType, timeToElapse);\r\n    const infectionsByRequestedTime = currentlyInfected * (2 ** Math.trunc(timeInDays / 3));\r\n    const severeCasesByRequestedTime = infectionsByRequestedTime * 0.15;\r\n    const hospitalBedAvailable = totalHospitalBeds * 0.35;\r\n    const hospitalBedsByRequestedTime = Math.trunc(hospitalBedAvailable - severeCasesByRequestedTime);\r\n    const casesForICUByRequestedTime = Math.trunc(infectionsByRequestedTime * 0.05);\r\n    const casesForVentilatorsByRequestedTime = Math.trunc(infectionsByRequestedTime * 0.02);\r\n    /*const avgDollarXIncomePopXtime = avgDailyIncomePopulation * avgDailyIncomeInUSD;\r\n    const dollarOut = (infectionsByRequestedTime * avgDollarXIncomePopXtime) / timeInDays;\r\n    const dollarsInFlight = Math.floor(dollarOut);*/\r\n  \r\n    return {\r\n      currentlyInfected,\r\n      infectionsByRequestedTime,\r\n      severeCasesByRequestedTime,\r\n      hospitalBedsByRequestedTime,\r\n      casesForICUByRequestedTime,\r\n      casesForVentilatorsByRequestedTime,\r\n      //dollarsInFlight\r\n    };\r\n  };\r\n  \r\n  export const impactCases = (data) => {\r\n    const { reportedCases } = data;\r\n    const currentlyInfected = reportedCases * 10;\r\n    return commonFunction(currentlyInfected, data);\r\n  };\r\n  \r\n  export const severeImpactCases = (data) => {\r\n    const { reportedCases } = data;\r\n    const currentlyInfected = reportedCases * 50;\r\n    return commonFunction(currentlyInfected, data);\r\n  };\r\n  \r\n  export const covid19ImpactEstimator = (data) => (\r\n    {\r\n      data,\r\n      impact: impactCases(data),\r\n      severeImpact: severeImpactCases(data)\r\n    }\r\n  );\r\n  \r\n  export default covid19ImpactEstimator;\r\n  ","import React, {Component} from 'react';\r\nimport {Bar, Line, Pie} from 'react-chartjs-2';\r\n\r\n\r\n\r\nclass Result extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      impact: '',\r\n      severeImpact: '',\r\n      toggleImpact: false\r\n    }\r\n  }\r\n  switchBtwImPactAndSevere = (data) => {\r\n    return {\r\n      chartData: {\r\n        labels: [\r\n          `Reported Cases(${this.props.result.data.reportedCases})`, \r\n          `Estimate Currently Infected(${data.currentlyInfected})`, \r\n          `Infections in ${this.props.result.data.timeToElapse} ${this.props.result.data.periodType}`,\r\n          `Cases in ICU (${data.casesForICUByRequestedTime})`\r\n        ],\r\n        datasets: [\r\n          {\r\n            label: 'Severe Estimated Impact',\r\n            data: [\r\n              this.props.result.data.reportedCases,\r\n              data.currentlyInfected,\r\n              data.infectionsByRequestedTime,\r\n              data.casesForICUByRequestedTime,\r\n            ],\r\n            backgroundColor: ['#45ec23', '#45ec23', '#45ec23', '#45ec23']\r\n          }\r\n        ]\r\n\r\n      },\r\n\r\n    }\r\n  }\r\n  componentWillReceiveProps() {\r\n    setTimeout(() => {\r\n      if(this.props.result !== undefined ){\r\n        this.setState({\r\n          severeImpact: this.switchBtwImPactAndSevere(this.props.result.severeImpact),\r\n          impact: this.switchBtwImPactAndSevere(this.props.result.impact)\r\n        });\r\n      }\r\n    }, 1000);\r\n    \r\n  }\r\n  handleClick = () => {\r\n    this.setState({\r\n      toggleImpact: !this.state.toggleImpact\r\n    })\r\n  }\r\n  render() {\r\n    if(this.props.result !== undefined) {\r\n      console.log(this.props.result);\r\n    }\r\n    if(this.state.toggleImpact){\r\n      return(\r\n        <div className='inner-flex-box'>\r\n          <div className='button-div'>\r\n            <button className='result-button' onClick={this.handleClick}>{(!this.state.toggleImpact)? 'Estimated Impact' : 'Worst Case Scenerio'}</button>\r\n            <span>{(this.state.toggleImpact) ? 'Best Case' : 'Worst Case'}</span>\r\n          </div>         \r\n          <div className='inner-flex- child'>\r\n          <Bar \r\n            data={this.state.impact.chartData}\r\n            option={{\r\n              maintainAspectRatio: false\r\n            }}\r\n          />  \r\n          </div>\r\n        </div>\r\n      )\r\n    } else {\r\n      return(\r\n        <div className='inner-flex-box'>\r\n          <div className='button-div'>\r\n            <button className='result-button' onClick={this.handleClick}>{(!this.state.toggleImpact)? 'Estimated Impact' : 'Worst Case Scenerio'}</button>\r\n            <span>{(this.state.toggleImpact) ? 'Best Case' : 'Worst Case'}</span>\r\n          </div>\r\n          <div className='inner-flex- child'>\r\n          <Bar \r\n            data={this.state.severeImpact.chartData}\r\n            option={{\r\n              maintainAspectRatio: false\r\n            }}\r\n          />  \r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    \r\n  }\r\n}\r\n\r\nexport default Result;","import React, {Component} from 'react';\r\nimport {covid19ImpactEstimator} from './estimator.js';\r\n//import {Redirect} from 'react-router-dom';\r\nimport Result from './Result';\r\n\r\nclass Form extends Component {\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      population: '',\r\n      periodType: '',\r\n      timeToElapse: '',\r\n      reportedCases: '',\r\n      totalHospitalBeds: '',\r\n      formErrors: {\r\n        population: '',\r\n        periodType: '',\r\n        timeToElapse: '',\r\n        reportedCases: '',\r\n        totalHospitalBeds: ''\r\n      },\r\n      popEntryInvalid: true,\r\n      periodTypeInvalid: true,\r\n      timeToElapseInValid: true,\r\n      reportedCasesInvalid: true,\r\n      totalHospitalBedsInvalid: true,\r\n      formValid: false,\r\n      submitError: '',\r\n      canSubmit: false\r\n    }\r\n  }\r\n\r\n  validateInput = (fieldName, value) => {\r\n    let formErrors = this.state.formErrors;\r\n    let popEntryInvalid = this.state.popEntryInvalid;\r\n    let periodTypeInvalid = this.state.periodTypeInvalid;\r\n    let timeToElapseInValid = this.state.timeToElapseInValid;\r\n    let reportedCasesInvalid = this.state.reportedCasesInvalid;\r\n    let totalHospitalBedsInvalid = this.state.reportedCasesInvalid;\r\n\r\n    switch (fieldName) {\r\n      case 'population':\r\n        popEntryInvalid = Number(value) < 10 || value.length < 1;\r\n        formErrors.population = popEntryInvalid ? 'Population cannot be blank or less than 10' : '';\r\n        break;\r\n      case 'periodType':\r\n        periodTypeInvalid = value == '';\r\n        formErrors.periodType = periodTypeInvalid ? 'Select a period Type' : '';\r\n        break;\r\n      case 'timeToElapse':\r\n        timeToElapseInValid = Number(value) < 1 || value.length < 1;\r\n        formErrors.timeToElapse = timeToElapseInValid ? 'input a figure above 1' : '';\r\n        break;\r\n      case 'reportedCases':\r\n        reportedCasesInvalid = Number(value) < 1 || value.length < 1;\r\n        formErrors.reportedCases = reportedCasesInvalid ? 'Reported Cases Cannot be blank or less than 1' : '';\r\n        break;\r\n      case 'totalHospitalBeds':\r\n        totalHospitalBedsInvalid = Number(value) < 1 || value.length < 1;\r\n        formErrors.totalHospitalBeds = totalHospitalBedsInvalid ? 'Total hospital beds cannot blank or less than 1' : '';\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    this.setState({\r\n      periodTypeInvalid,\r\n      popEntryInvalid,\r\n      timeToElapseInValid,\r\n      reportedCasesInvalid,\r\n      totalHospitalBedsInvalid\r\n    }, this.validateForm);\r\n  }\r\n\r\n  validateForm = () => {\r\n    this.setState({\r\n      formValid: !this.state.periodTypeInvalid && \r\n                !this.state.popEntryInvalid &&\r\n                !this.state.timeToElapseInValid &&\r\n                !this.state.reportedCasesInvalid &&\r\n                !this.state.totalHospitalBedsInvalid\r\n    })\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    this.setState({\r\n      [name] : value\r\n    }, () => {\r\n      this.validateInput(name, value)\r\n    })\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(this.state.periodType);\r\n    if(!this.state.formValid) {\r\n      this.setState({\r\n        submitError: 'You need to enter all empty space to submit the form'\r\n      })\r\n      //console.log(this.state.submitError);\r\n    }else{\r\n      this.setState({\r\n        result: covid19ImpactEstimator(this.state),\r\n        submitError: ''\r\n      });\r\n\r\n      //console.log(this.state.result);\r\n    }\r\n    \r\n\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className='container'>\r\n        <header className='header'>COVID-19 Impact Estimator</header>\r\n        <div className='flex-container'>\r\n          <form className='flex-box'>\r\n            <p className='submit-error'>{this.state.submitError}</p>\r\n            <div className='error-text'>\r\n              <FormErrors formErrors={this.state.formErrors} />                    \r\n            </div>\r\n            <div className='input-half'>\r\n              <label>Population\r\n                <input data-population type='number' name='population' onChange={this.handleChange} placeholder='Enter Population'/>\r\n              </label>\r\n              <label>Period Type              \r\n                <select data-period-type name='periodType' value={this.state.periodType} onChange={this.handleChange} placeholder='Select Period Type'>\r\n                  <option value=''>Select Period Type</option>\r\n                  <option value='days'>Days</option>\r\n                  <option value='weeks'>Weeks</option>\r\n                  <option value='months'>Months</option>\r\n                </select>\r\n              </label>\r\n              <label>Time to elaspe\r\n                <input data-time-to-elapse type='number' name='timeToElapse' onChange={this.handleChange} placeholder='Time to Elapse'/>\r\n              </label>\r\n              <label>Reported Cases              \r\n                <input data-reported-cases type='number' name='reportedCases' onChange={this.handleChange} placeholder='Enter Reported Cases'/>\r\n              </label>\r\n              <label>Total Hospital Beds              \r\n                <input data-total-hospital-beds type='number' name='totalHospitalBeds' onChange={this.handleChange} placeholder='Enter Total Hospital Beds'/>\r\n              </label>\r\n            </div>\r\n            <div className='button-div'>\r\n              <button class='form-button' data-go-estimate type='submit' onClick={this.handleSubmit}>Estimate</button>\r\n            </div>\r\n          </form>\r\n          <section className='flex-box'>\r\n            <Result result={this.state.result}/>\r\n          </section>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst FormErrors = ({formErrors}) => {\r\n  return(\r\n    <div className='formErrors'>\r\n      <ul>\r\n        {\r\n          Object.keys(formErrors).map((fieldName, i) => {\r\n            if(formErrors[fieldName].length > 0){\r\n              return (\r\n                <li key={i}>{formErrors[fieldName]}</li>\r\n              )\r\n            }\r\n          })\r\n        }\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Form;","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Form from './components/Form';\n//import { render } from '@testing-library/react';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Form />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}